apiVersion: kubedb.com/v1alpha1
kind: MySQL
metadata:
  name: {{ template "mysql.fullname" . }}-mysql
  labels:
    app: {{ template "mysql.name" . }}-mysql
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  version: {{ .Values.config.version | quote }}
  configSource:
    configMap:
      name: {{ template "mysql.fullname" . }}-mysql
  {{- if (not (empty .Values.config.secret)) }}
  databaseSecret:
    secretName: {{ .Values.config.secret }}
  {{- end }}
  standbyMode: {{ .Values.config.standbyMode | quote }}
  {{- if .Values.config.prometheus }}
  monitor:
    agent: prometheus.io/builtin
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storageType: Durable
  storage:
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
    storageClassName: ''
    {{- else }}
    storageClassName: {{ .Values.persistence.storageClass }}
    {{- end }}
    {{- end }}
    accessModes:
      - {{ .Values.persistence.accessMode }}
    resources:
      requests:
        storage: {{ .Values.persistence.size }}
  {{- else }}
  storageType: Ephemeral
  {{- end }}
  {{- if .Values.persistence.backup.enabled }}
  backupSchedule:
    cronExpression: {{ .Values.persistence.backup.schedule | quote }}
    storageSecretName: {{ template "mysql.fullname" . }}-mysql
    {{ .Values.persistence.backup.type }}:
      {{- if (or (eq "gcs" .Values.persistence.backup.type) (eq "s3" .Values.persistence.backup.type)) }}
      bucket: {{ .Values.persistence.backup.bucket | quote }}
      {{- end }}
      {{- if (eq "s3" .Values.persistence.backup.type) }}
      endpoint: {{ .Values.persistence.backup.endpoint | quote }}
      {{- end }}
      {{- if (eq "azure" .Values.persistence.backup.type) }}
      container: {{ .Values.persistence.backup.container | quote }}
      {{- end }}
      prefix: {{ .Values.persistence.backup.prefix | quote }}
  {{- if .Values.persistence.backup.restore }}
  init:
    snapshotSource:
      name: {{ .Values.persistence.backup.restoreSnapshot }}
      {{- if (empty .Values.persistence.backup.restoreNamespace) }}
      namespace: {{ .Release.Namespace }}
      {{- else }}
      namespace: {{ .Values.persistence.backup.restoreNamespace }}
      {{- end }}
  {{- end }}
  {{- end }}
  serviceTemplate:
    metadata:
      annotations:
        passMe: ToService
    spec:
      type: {{ .Values.service.mysql.type }}
      {{- if (or (eq .Values.service.mysql.type "LoadBalancer") (eq .Values.service.mysql.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.mysql.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: mysql
          port: 3306
          targetPort: mysql
          {{- if (and (eq .Values.service.mysql.type "NodePort") (not (empty .Values.service.mysql.nodePorts.mysql.port))) }}
          nodePort: {{ .Values.service.mysql.nodePorts.mysql.port }}
          {{- end }}
  replicaServiceTemplate:
    annotations:
      passMe: ToReplicaService
    spec:
      type: {{ .Values.service.mysql.type }}
      {{- if (or (eq .Values.service.mysql.type "LoadBalancer") (eq .Values.service.mysql.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.mysql.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name:  mysql
          port:  3306
          targetPort: mysql
          {{- if (and (eq .Values.service.mysql.type "NodePort") (not (empty .Values.service.mysql.nodePorts.mysql.port))) }}
          nodePort: {{ .Values.service.mysql.nodePorts.mysql.port }}
          {{- end }}
  updateStrategy:
    type: {{ .Values.config.updateStrategy }}
  terminationPolicy: Delete
