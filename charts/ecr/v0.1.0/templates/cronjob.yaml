apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "ecr.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
            - image: odaniait/aws-kubectl:latest
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |-
                  ACCOUNT=1234567890
                  REGION=my-region-1
                  SECRET_NAME=${REGION}-ecr-registry
                  EMAIL=anymail.doesnt.matter@email.com
                  TOKEN=`aws ecr get-login --region ${REGION} --registry-ids ${ACCOUNT} | cut -d' ' -f6`
                  echo "ENV variables setup done."
                  kubectl delete secret --ignore-not-found $SECRET_NAME
                  kubectl create secret docker-registry $SECRET_NAME \
                  --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password="${TOKEN}" \
                  --docker-email="${EMAIL}"
                  echo "Secret created by name. $SECRET_NAME"
                  kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
                  echo "All done."
              env:
                - name: AWS_DEFAULT_REGION
                  value: {{ .Values.config.aws.region }}
                - name: AWS_SECRET_ACCESS_KEY
                  value: {{ .Values.config.aws.accessKey }}
                - name: AWS_ACCESS_KEY_ID
                  value: {{ .Values.config.aws.secretKey }}
              name: ecr-cred-helper
              resources: {}
              securityContext:
                capabilities: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: '0 */6 * * *'
  successfulJobsHistoryLimit: 3
  suspend: false
