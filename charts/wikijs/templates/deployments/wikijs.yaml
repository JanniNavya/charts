apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "wikijs.fullname" . }}-wikijs
  labels:
    app: {{ template "wikijs.name" . }}-wikijs
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  template:
    metadata:
      labels:
        app: {{ template "wikijs.name" . }}-wikijs
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ template "wikijs.fullname" . }}-wikijs
          image: {{ .Values.images.wikijs.repository }}:{{ .Values.images.wikijs.tag }}
          imagePullPolicy: {{ .Values.images.wikijs.pullPolicy }}
          command: ["cp", "/tmp/wiki/config.yml", "/var/wiki/config.yml"]
          arguments: "&& node server"
          ports:
            - name: container
              containerPort: 3000
          volumeMounts:
            - name: data
              mountPath: /var/wiki/repo
              subPath: repo
            - name: data
              mountPath: /var/wiki/data
              subPath: data
            - name: config
              mountPath: /tmp/wiki
          env:
            - name: WIKI_ADMIN_EMAIL
              valueFrom:
                configMapKeyRef:
                  name: {{ template "wikijs.fullname" . }}
                  key: email
          livenessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ template "wikijs.fullname" . }}-wikijs
        - name: data
          {{- if .Values.persistence.enabled }}
          {{- if (eq .Values.persistence.type "persistentVolumeClaim") }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "wikijs.fullname" . ) }}
          {{- else if (eq .Values.persistence.type "awsElasticBlockStore") }}
          awsElasticBlockStore:
            volumeID: {{ .Values.persistence.volumeId }}
            fsType: {{ .Values.persistence.fsType }}
          {{- else if (eq .Values.persistence.type "azureDisk") }}
          azureDisk:
            cachingMode: {{ .Values.persistence.cachingMode }}
            diskName: {{ .Values.persistence.diskName }}
            diskURI: {{ .Values.persistence.diskUri }}
            fsType: {{ .Values.persistence.fsType }}
            kind: {{ .Values.persistence.diskKind }}
            readOnly: {{ .Values.persistence.readOnly | quote }}
          {{- else if (eq .Values.persistence.type "azureFile") }}
          azureFile:
            readOnly: {{ .Values.persistence.readOnly | quote }}
            secretName: {{ .Values.persistence.secretName }}
            shareName: {{ .Values.persistence.shareName }}
            {{- if (not (empty .Values.persistence.secretNamespace)) }}
            secretNamespace: {{ .Values.persistence.secretNamespace }}
            {{- end }}
          {{- else if (eq .Values.persistence.type "cephfs") }}
          cephfs:
          {{- else if (eq .Values.persistence.type "flocker") }}
          flocker:
          {{- else if (eq .Values.persistence.type "gcePersistentDisk") }}
          gcePersistentDisk:
          {{- else if (eq .Values.persistence.type "glusterfs") }}
          glusterfs:
          {{- else if (eq .Values.persistence.type "local") }}
          local:
          {{- else if (eq .Values.persistence.type "nfs") }}
          nfs:
          {{- else if (eq .Values.persistence.type "portworxVolume") }}
          portworxVolume:
          {{- else if (eq .Values.persistence.type "quobyte") }}
          quobyte:
          {{- else if (eq .Values.persistence.type "rbd") }}
          rbd:
          {{- else if (eq .Values.persistence.type "scaleIO") }}
          scaleIO:
          {{- else if (eq .Values.persistence.type "storageOS") }}
          storageOS:
          {{- else if (eq .Values.persistence.type "vsphereVolume") }}
          vsphereVolume:
          {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
